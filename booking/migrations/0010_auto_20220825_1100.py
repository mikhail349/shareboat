# Generated by Django 3.2.7 on 2022-08-25 08:00

from django.db import migrations
import json

def apply_migration(apps, schema_editor):

    MotorBoat = apps.get_model('boat', 'MotorBoat')
    ComfortBoat = apps.get_model('boat', 'ComfortBoat')
    BoatCoordinates = apps.get_model('boat', 'BoatCoordinates')
    
    Booking = apps.get_model('booking', 'Booking')
    BoatInfo = apps.get_model('booking', 'BoatInfo')
    BoatInfoCoordinates = apps.get_model('booking', 'BoatInfoCoordinates')

    for booking in Booking.objects.all():
        boat = booking.boat

        term_content = None
        if boat.term:
            term_content = boat.term.content

        photo = None 
        if boat.files.exists():
            photo = boat.files.all().first().file

        spec = {
            'name': boat.name,
            'text': boat.text,
            'issue_year': boat.issue_year,
            'length': boat.length,
            'width': boat.width,
            'draft': boat.draft,
            'capacity': boat.capacity
        }

        try:
            motor = {
                'motor_amount': boat.motor_boat.motor_amount,
                'motor_power': boat.motor_boat.motor_power
            }
            spec['motor'] = motor
        except MotorBoat.DoesNotExist:
            pass

        try:
            comfort = {
                'berth_amount': boat.comfort_boat.berth_amount,
                'extra_berth_amount': boat.comfort_boat.extra_berth_amount,
                'cabin_amount': boat.comfort_boat.cabin_amount,
                'bathroom_amount': boat.comfort_boat.bathroom_amount
            }
            spec['comfort'] = comfort
        except ComfortBoat.DoesNotExist:
            pass

        boat_info = BoatInfo.objects.create(
            booking=booking,
            prepayment_required=boat.prepayment_required,
            term_content=term_content,
            owner=boat.owner,
            model=boat.model,
            type=boat.type,
            base=boat.base,
            photo=photo,
            spec=json.dumps(spec, default=str)
        )

        try:
            BoatInfoCoordinates.objects.create(
                boat_info=boat_info,
                lon=boat.coordinates.lon,
                lat=boat.coordinates.lat,
                address=boat.coordinates.address,
                state=boat.coordinates.state
            )
        except BoatCoordinates.DoesNotExist:
            pass


def revert_migration(apps, schema_editor):   
    BoatInfo = apps.get_model('booking', 'BoatInfo')
    BoatInfoCoordinates = apps.get_model('booking', 'BoatInfoCoordinates')

    BoatInfoCoordinates.objects.all().delete()
    BoatInfo.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ('booking', '0009_rename_booking_boat_boatinfocoordinates_boat_info'),
    ]

    operations = [
        migrations.RunPython(apply_migration, revert_migration),
    ]
